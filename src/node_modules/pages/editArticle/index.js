import React, {useEffect, useState, useContext} from 'react'

import ArticleForm from 'components/articleForm'
import useFetch from 'hooks/useFetch'
import {CurrentUserContext} from 'context/currentUser'
import { Redirect } from 'react-router-dom'

const EditArticle = ({match}) => {  
  const slug = match.params.slug
  const apiUrl=`/articles/${slug}`
  const [{response: fetchArticleResponse}, doFetchArticle] = useFetch(apiUrl)
  const [
    {response: updateArticleResponse, error: updateArticleError}, doUpdateArticle
  ]= useFetch(apiUrl)
  const [initialValues, setInitialValues]=useState(null)
  const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)
  const [CurrentUserState] = useContext(CurrentUserContext)  

  const  handleSubmit=  article => {  
    console.log('handleSub', article)  
    doUpdateArticle({
      method: 'put',
      data: {
        article
      }
    })
  }

  useEffect(() => {
    doFetchArticle()   
  }, [doFetchArticle])

  useEffect(() => {
    if (!fetchArticleResponse)  {
      return
    }

    setInitialValues({
      title:fetchArticleResponse.article.title,
      description:fetchArticleResponse.article.description,
      body:fetchArticleResponse.article.body,
      tagList:fetchArticleResponse.article.tagList,
    })
  }, [fetchArticleResponse])

  
  useEffect(() => {
    if(!updateArticleResponse) {
      return
    }  
    setIsSuccessfullSubmit(true)
  }, [updateArticleResponse])

  if (CurrentUserState.isLoggedIn === false) {
    return <Redirect to='/' />
  }
  
  if (isSuccessfullSubmit) {
    return <Redirect to={`/articles/${slug}`} />
  }
 
  return (
    <ArticleForm
        errors={(updateArticleError && updateArticleError.errors) || {}}
        initialValues={initialValues}  
        onSubmit={handleSubmit} 
      />
  )
}

export default EditArticle